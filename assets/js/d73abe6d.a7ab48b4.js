"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[505],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>y});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function u(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=n.createContext({}),s=function(e){var r=n.useContext(o),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},p=function(e){var r=s(e.components);return n.createElement(o.Provider,{value:r},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),c=s(t),m=a,y=c["".concat(o,".").concat(m)]||c[m]||d[m]||l;return t?n.createElement(y,i(i({ref:r},p),{},{components:t})):n.createElement(y,i({ref:r},p))}));function y(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=m;var u={};for(var o in r)hasOwnProperty.call(r,o)&&(u[o]=r[o]);u.originalType=e,u[c]="string"==typeof e?e:a,i[1]=u;for(var s=2;s<l;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5252:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>u,toc:()=>s});var n=t(7462),a=(t(7294),t(3905));const l={title:"useQuery",sidebar_label:"useQuery"},i=void 0,u={unversionedId:"use-query",id:"use-query",title:"useQuery",description:"useQuery(query, variables, config?)",source:"@site/docs/use-query.md",sourceDirName:".",slug:"/use-query",permalink:"/graphql-client/use-query",draft:!1,editUrl:"https://github.com/swan-io/boxed/edit/main/docs/docs/use-query.md",tags:[],version:"current",frontMatter:{title:"useQuery",sidebar_label:"useQuery"},sidebar:"docs",previous:{title:"Getting started",permalink:"/graphql-client/getting-started"},next:{title:"useMutation",permalink:"/graphql-client/use-mutation"}},o={},s=[{value:"useQuery(query, variables, config?)",id:"usequeryquery-variables-config",level:2},{value:"Params",id:"params",level:3},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2}],p={toc:s},c="wrapper";function d(e){let{components:r,...t}=e;return(0,a.kt)(c,(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"usequeryquery-variables-config"},"useQuery(query, variables, config?)"),(0,a.kt)("h3",{id:"params"},"Params"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"query"),": your query document node"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"variables"),": your query variables"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"config")," (optional)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"suspense"),": use React Suspense (default: ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),")")))),(0,a.kt)("h3",{id:"returns"},"Returns"),(0,a.kt)("p",null,"This hook returns a tuple you can extract like a ",(0,a.kt)("inlineCode",{parentName:"p"},"useState"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const [data, {isLoading, refresh, reload}] = useQuery(...)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"data")," (",(0,a.kt)("inlineCode",{parentName:"li"},"AsyncData<Result<Data, ClientError>>"),"): the GraphQL response"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"isLoading")," (",(0,a.kt)("inlineCode",{parentName:"li"},"boolean"),"): if the query is fetching"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"refresh()"),": refresh the query in the background, keeping current data on screen"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"reload()"),": reload the query (full reload, showing a full loading state)")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { useQuery } from "@swan-io/graphql-client";\n// ...\n\nconst userPageQuery = graphql(`\n  query UserPage($userId: ID!) {\n    user(id: $userId) {\n      id\n      username\n      avatar\n    }\n  }\n`);\n\ntype Props = {\n  userId: string;\n};\n\nconst UserPage = ({ userId }: Props) => {\n  const [user] = useQuery(userPageQuery, { userId });\n\n  return user.match({\n    NotAsked: () => null,\n    Loading: () => <LoadingIndicator />,\n    Done: (result) =>\n      result.match({\n        Error: (error) => <ErrorIndicator error={error} />,\n        Ok: (user) => <UserDetails user={user} />,\n      }),\n  });\n};\n')))}d.isMDXComponent=!0}}]);