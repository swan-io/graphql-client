"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[787],{4707:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var t=n(4848),s=n(8453);const o={title:"Client Errors",sidebar_label:"Client Errors"},i=void 0,l={id:"client-errors",title:"Client Errors",description:"Errors",source:"@site/docs/client-errors.md",sourceDirName:".",slug:"/client-errors",permalink:"/graphql-client/client-errors",draft:!1,unlisted:!1,editUrl:"https://github.com/swan-io/graphql-client/edit/main/docs/docs/client-errors.md",tags:[],version:"current",frontMatter:{title:"Client Errors",sidebar_label:"Client Errors"},sidebar:"docs",previous:{title:"Pagination",permalink:"/graphql-client/pagination"},next:{title:"Caching",permalink:"/graphql-client/caching"}},c={},d=[{value:"Errors",id:"errors",level:2},{value:"Error types",id:"error-types",level:2}];function a(e){const r={code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"errors",children:"Errors"}),"\n",(0,t.jsxs)(r.p,{children:["The default error handling is that any error (including ",(0,t.jsx)(r.code,{children:'{"errors": [...]}'})," in your GraphQL response) makes the whole query in error. If you rather want the query to be considered valid, you can update the parsing logic by providing a custom ",(0,t.jsx)(r.code,{children:"makeRequest"})," to your ",(0,t.jsx)(r.code,{children:"Client"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"error-types",children:"Error types"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"NetworkError"}),": network isn't reachable"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"TimeoutError"}),": request timeout"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"BadStatusError"}),": request status is not in the valid range (",(0,t.jsx)(r.code,{children:">= 200"})," && ",(0,t.jsx)(r.code,{children:"< 300"}),")"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"EmptyResponseError"}),": response was empty"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"InvalidGraphQLResponseError"}),": error parsing the payload"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"GraphQLError[]"}),": the GraphQL payload returned errors"]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>l});var t=n(6540);const s={},o=t.createContext(s);function i(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);