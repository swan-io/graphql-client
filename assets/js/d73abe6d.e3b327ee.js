"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[165],{3536:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var s=n(4848),t=n(8453);const i={title:"useQuery",sidebar_label:"useQuery"},a=void 0,l={id:"use-query",title:"useQuery",description:"useQuery(query, variables, config?)",source:"@site/docs/use-query.md",sourceDirName:".",slug:"/use-query",permalink:"/graphql-client/use-query",draft:!1,unlisted:!1,editUrl:"https://github.com/swan-io/graphql-client/edit/main/docs/docs/use-query.md",tags:[],version:"current",frontMatter:{title:"useQuery",sidebar_label:"useQuery"},sidebar:"docs",previous:{title:"Getting started",permalink:"/graphql-client/getting-started"},next:{title:"useDeferredQuery",permalink:"/graphql-client/use-deferred-query"}},o={},c=[{value:"useQuery(query, variables, config?)",id:"usequeryquery-variables-config",level:2},{value:"Params",id:"params",level:3},{value:"Returns",id:"returns",level:3},{value:"Lifecycle",id:"lifecycle",level:3},{value:"Suspense",id:"suspense",level:3},{value:"Example",id:"example",level:2}];function d(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"usequeryquery-variables-config",children:"useQuery(query, variables, config?)"}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"useQuery"})," hook will execute the query with the given ",(0,s.jsx)(r.code,{children:"variables"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'import { AsyncData, Result } from "@swan-io/boxed";\nimport { useQuery } from "@swan-io/graphql-client";\nimport { match, P } from "ts-pattern";\n\nconst query = gql(`\n  query MyQuery {\n    __typename\n  }\n`)\n\nconst MyComponent = () => {\n  const [data] = useQuery(query, {});\n\n  return match(data)\n    .with(AsyncData.P.NotAsked, AsyncData.P.Loading, () => <LoadingView />)\n    .with(AsyncData.P.Done(Result.P.Error(P.select())), (error) => <ErrorView error={error} />)\n    .with(AsyncData.P.Done(Result.P.Ok(P.select())), data => {\n      // show your data\n    })\n    .exhaustive();\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"data"})," is exposed as an ",(0,s.jsx)(r.a,{href:"https://swan-io.github.io/boxed/async-data",children:(0,s.jsx)(r.code,{children:"AsyncData"})})," (to represent the loading date), that contains a ",(0,s.jsx)(r.a,{href:"https://swan-io.github.io/boxed/result",children:(0,s.jsx)(r.code,{children:"Result"})})," (to represent the success of the operation), which is either ",(0,s.jsx)(r.code,{children:"Ok<Data>"})," or ",(0,s.jsx)(r.code,{children:"Error<ClientError>"}),"."]}),"\n",(0,s.jsx)(r.p,{children:"This structure avoids any ambuguity as to what the current state of the data is."}),"\n",(0,s.jsx)(r.h3,{id:"params",children:"Params"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"query"}),": your query document node"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"variables"}),": your query variables"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"config"})," (optional)","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"suspense"}),": use React Suspense (default: ",(0,s.jsx)(r.code,{children:"false"}),")"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"overrides"}),": custom request configuration (",(0,s.jsx)(r.code,{children:"url"}),", ",(0,s.jsx)(r.code,{children:"headers"})," and/or ",(0,s.jsx)(r.code,{children:"withCredentials"}),")"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"optimize"}),": (\u26a0\ufe0f experimental) adapt query to only require data that's missing from the cache (default: ",(0,s.jsx)(r.code,{children:"false"}),")"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(r.p,{children:["This hook returns a tuple you can extract like a ",(0,s.jsx)(r.code,{children:"useState"}),":"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"const [data, {isLoading, refresh, reload, setVariables}] = useQuery(...)\n"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"data"})," (",(0,s.jsx)(r.code,{children:"AsyncData<Result<Data, ClientError>>"}),"): the GraphQL response"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"isLoading"})," (",(0,s.jsx)(r.code,{children:"boolean"}),"): if the query is fetching"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"refresh()"}),": refresh the query in the background, keeping current data on screen"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"reload()"}),": reload the query (full reload, showing a full loading state and resets local variables)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"setVariables(variables)"}),": overwrites the variables locally, useful for ",(0,s.jsx)(r.code,{children:"before"})," & ",(0,s.jsx)(r.code,{children:"after"})," pagination"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"lifecycle",children:"Lifecycle"}),"\n",(0,s.jsxs)(r.p,{children:["Any time the provided ",(0,s.jsx)(r.code,{children:"variables"})," structurally change (meaning they're not deeply equal to the previous ones), the query will fully reload."]}),"\n",(0,s.jsx)(r.h3,{id:"suspense",children:"Suspense"}),"\n",(0,s.jsxs)(r.p,{children:["You can optionally provide a ",(0,s.jsx)(r.code,{children:"suspense"})," flag to activate the feature, but the exposed ",(0,s.jsx)(r.code,{children:"data"})," will still be an ",(0,s.jsx)(r.code,{children:"AsyncData<Result<Data, ClientError>>"})," so that your component isn't tied to a particular rendering context: it'll always be capable of handling its own loading state if not suspended."]}),"\n",(0,s.jsx)(r.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'import { useQuery } from "@swan-io/graphql-client";\n// ...\n\nconst userPageQuery = graphql(`\n  query UserPage($userId: ID!) {\n    user(id: $userId) {\n      id\n      username\n      avatar\n    }\n  }\n`);\n\ntype Props = {\n  userId: string;\n};\n\nconst UserPage = ({ userId }: Props) => {\n  const [user] = useQuery(userPageQuery, { userId });\n\n  return user.match({\n    NotAsked: () => null,\n    Loading: () => <LoadingIndicator />,\n    Done: (result) =>\n      result.match({\n        Error: (error) => <ErrorIndicator error={error} />,\n        Ok: (user) => <UserDetails user={user} />,\n      }),\n  });\n};\n'})})]})}function u(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>l});var s=n(6540);const t={},i=s.createContext(t);function a(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);