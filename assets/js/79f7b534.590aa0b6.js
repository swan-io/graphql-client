"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[298],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=l(n),d=a,f=p["".concat(s,".").concat(d)]||p[d]||c[d]||o;return n?r.createElement(f,u(u({ref:t},m),{},{components:n})):r.createElement(f,u({ref:t},m))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,u=new Array(o);u[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:a,u[1]=i;for(var l=2;l<o;l++)u[l]=n[l];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},231:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>u,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={title:"useMutation",sidebar_label:"useMutation"},u=void 0,i={unversionedId:"use-mutation",id:"use-mutation",title:"useMutation",description:"useMutation(mutation)",source:"@site/docs/use-mutation.md",sourceDirName:".",slug:"/use-mutation",permalink:"/graphql-client/use-mutation",draft:!1,editUrl:"https://github.com/swan-io/boxed/edit/main/docs/docs/use-mutation.md",tags:[],version:"current",frontMatter:{title:"useMutation",sidebar_label:"useMutation"},sidebar:"docs",previous:{title:"useQuery",permalink:"/graphql-client/use-query"},next:{title:"Client",permalink:"/graphql-client/client"}},s={},l=[{value:"useMutation(mutation)",id:"usemutationmutation",level:2},{value:"Params",id:"params",level:3},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2}],m={toc:l},p="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"usemutationmutation"},"useMutation(mutation)"),(0,a.kt)("h3",{id:"params"},"Params"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mutation"),": your mutation document node")),(0,a.kt)("h3",{id:"returns"},"Returns"),(0,a.kt)("p",null,"This hook returns a tuple you can extract like a ",(0,a.kt)("inlineCode",{parentName:"p"},"useState"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const [commitMutation, mutationData] = useMutation(...)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"commitMutation(variables)"),": function commit the mutation, returns a ",(0,a.kt)("inlineCode",{parentName:"li"},"Future<Result<Data, ClientError>>")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mutationData")," (",(0,a.kt)("inlineCode",{parentName:"li"},"AsyncData<Result<Data, ClientError>>"),"): the mutation data")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { useMutation } from "@swan-io/graphql-client";\n// ...\n\nconst updateUsernameMutation = graphql(`\n  mutation UpdateUsername($userId: ID!, $username: String!) {\n    updateUsername(id: $userId, username: $username) {\n      ... on UpdateUsernameSuccessPayload {\n        user {\n          id\n          username\n          avatar\n        }\n      }\n      ... on InvalidUsernameRejection {\n        message\n      }\n    }\n  }\n`);\n\ntype Props = {\n  userId: string;\n};\n\nconst UserPage = ({ userId }: Props) => {\n  const [updateUsername, usernameUpdate] = useMutation(updateUsernameMutation);\n  const [username, setUsername] = useState("");\n\n  // ...\n  const onSubmit = (event) => {\n    event.preventDefault();\n    updateUsername({ userId, username });\n  };\n\n  const isLoading = usernameUpdate.isLoading();\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input\n        value={username}\n        readOnly={isLoading}\n        onChange={(event) => setUsername(event.target.value)}\n      />\n\n      <button type="submit" readOnly={isLoading}>\n        Submit\n      </button>\n    </form>\n  );\n};\n')))}c.isMDXComponent=!0}}]);