"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[456],{2029:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var a=t(4848),s=t(8453);const i={title:"useMutation",sidebar_label:"useMutation"},o=void 0,r={id:"use-mutation",title:"useMutation",description:"useMutation(mutation, config?)",source:"@site/docs/use-mutation.md",sourceDirName:".",slug:"/use-mutation",permalink:"/graphql-client/use-mutation",draft:!1,unlisted:!1,editUrl:"https://github.com/swan-io/graphql-client/edit/main/docs/docs/use-mutation.md",tags:[],version:"current",frontMatter:{title:"useMutation",sidebar_label:"useMutation"},sidebar:"docs",previous:{title:"useDeferredQuery",permalink:"/graphql-client/use-deferred-query"},next:{title:"Client",permalink:"/graphql-client/client"}},u={},l=[{value:"useMutation(mutation, config?)",id:"usemutationmutation-config",level:2},{value:"Params",id:"params",level:3},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2},{value:"Handling connections",id:"handling-connections",level:2}];function c(n){const e={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{id:"usemutationmutation-config",children:"useMutation(mutation, config?)"}),"\n",(0,a.jsx)(e.h3,{id:"params",children:"Params"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"mutation"}),": your mutation document node"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"config"}),":","\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"connectionUpdates"}),": configuration to prepend/append/remove edges from connections on mutation"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"returns",children:"Returns"}),"\n",(0,a.jsxs)(e.p,{children:["This hook returns a tuple you can extract like a ",(0,a.jsx)(e.code,{children:"useState"}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"const [commitMutation, mutationData] = useMutation(...)\n"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"commitMutation(variables)"}),": function commit the mutation, returns a ",(0,a.jsx)(e.code,{children:"Future<Result<Data, ClientError>>"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"mutationData"})," (",(0,a.jsx)(e.code,{children:"AsyncData<Result<Data, ClientError>>"}),"): the mutation data"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:'import { useMutation } from "@swan-io/graphql-client";\n// ...\n\nconst updateUsernameMutation = graphql(`\n  mutation UpdateUsername($userId: ID!, $username: String!) {\n    updateUsername(id: $userId, username: $username) {\n      ... on UpdateUsernameSuccessPayload {\n        user {\n          id\n          username\n          avatar\n        }\n      }\n      ... on InvalidUsernameRejection {\n        message\n      }\n    }\n  }\n`);\n\ntype Props = {\n  userId: string;\n};\n\nconst UserPage = ({ userId }: Props) => {\n  const [updateUsername, usernameUpdate] = useMutation(updateUsernameMutation);\n  const [username, setUsername] = useState("");\n\n  // ...\n  const onSubmit = (event) => {\n    event.preventDefault();\n    updateUsername({ userId, username });\n  };\n\n  const isLoading = usernameUpdate.isLoading();\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input\n        value={username}\n        readOnly={isLoading}\n        onChange={(event) => setUsername(event.target.value)}\n      />\n\n      <button type="submit" readOnly={isLoading}>\n        Submit\n      </button>\n    </form>\n  );\n};\n'})}),"\n",(0,a.jsx)(e.h2,{id:"handling-connections",children:"Handling connections"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"useMutation(BlockUser, {\n  connectionUpdates: [\n    ({ data, append }) =>\n      Option.fromNullable(data.blockUser).map(({ user }) =>\n        append(blockedUsers, [user]),\n      ),\n    ({ data, prepend }) =>\n      Option.fromNullable(data.blockUser).map(({ user }) =>\n        prepend(lastBlockedUsers, [user]),\n      ),\n  ],\n});\n\nuseMutation(Unfriend, {\n  connectionUpdates: [\n    ({ data, variables, remove }) =>\n      Option.fromNullable(data.unfriend).map(() =>\n        remove(friends, [variables.id]),\n      ),\n  ],\n});\n"})})]})}function d(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>r});var a=t(6540);const s={},i=a.createContext(s);function o(n){const e=a.useContext(i);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:o(n.components),a.createElement(i.Provider,{value:e},n.children)}}}]);